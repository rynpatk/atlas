{"version":3,"sources":["constants.js","supabase.js","mockData.js","pages/Main.js","pages/Login.js","App.js","styles/colors.js","styles/theme.js","index.js"],"names":["REACT_APP_SUPABASE_URL","process","REACT_APP_SUPABASE_KEY","supabase","createClient","MOCK_DATA","Main","url","HighlightedText","str","substr","startIndex","indexOf","trim","fontSize","startStr","slice","endStr","length","as","fontWeight","color","LinkListItem","inputTerm","m","onClick","window","open","_hover","cursor","Grid","category","links","direction","flexWrap","justify","align","pr","map","link","id","user","useState","setInputTerm","isCreatingLink","setIsCreatingLink","setLinks","selectedCategory","fetchLinks","Object","keys","a","from","select","order","ascending","data","error","console","log","addLink","insert","user_id","single","newLink","useEffect","bg","height","overflowY","width","pl","pt","mt","alignItems","px","pb","justifySelf","type","placeholder","value","onChange","e","target","disabled","alignSelf","variant","textDecoration","zIndex","position","bottom","right","auth","signOut","Login","signIn","provider","redirectTo","App","setUser","isAuthenticated","Boolean","session","onAuthStateChange","_","currentUser","authListener","unsubscribe","basename","exact","path","element","status","colors","Terracotta","HalfBaked","Tacao","OrientalPink","Keppel","softBlack","softPink","softBlue","softYellow","neutral","paper","info","success","warning","theme","extendTheme","fonts","heading","body","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06814d2f.chunk.js","sourcesContent":["export const REACT_APP_SUPABASE_URL = process.env.REACT_APP_SUPABASE_URL;\nexport const REACT_APP_SUPABASE_KEY = process.env.REACT_APP_SUPABASE_KEY;\n\nexport default {\n  REACT_APP_SUPABASE_KEY,\n  REACT_APP_SUPABASE_URL,\n};\n","import { createClient } from '@supabase/supabase-js';\n\nimport { REACT_APP_SUPABASE_URL, REACT_APP_SUPABASE_KEY } from './constants';\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient(\n  REACT_APP_SUPABASE_URL,\n  REACT_APP_SUPABASE_KEY,\n);\n\nexport default supabase;\n","export const MOCK_DATA = {\n  Main: {\n    1: {\n      url: 'www.google.com',\n    },\n    2: {\n      url: 'www.google.com',\n    },\n    3: {\n      url: 'www.google.com',\n    },\n    4: {\n      url: 'www.google.com',\n    },\n    5: {\n      url: 'www.google.com',\n    },\n    6: {\n      url: 'www.google.com',\n    },\n    7: {\n      url: 'www.google.com',\n    },\n  },\n  ['Misc.']: {\n    1: {\n      url: 'www.google.com',\n    },\n  },\n};\n\nexport default MOCK_DATA;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Stack,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Button,\n  Flex,\n  Text,\n  Span,\n} from '@chakra-ui/react';\n\nimport supabase from 'supabase';\nimport { MOCK_DATA } from 'mockData';\n\n// const Sidebar = ({ categories, selectedCategory, setSelectedCategory }) => {\n//   return (\n//     <Flex\n//       bg='#E0C9A5'\n//       height='100%'\n//       width='100%'\n//       direction='column'\n//       border='1px solid'\n//       borderColor='softBlack'\n//       p={3}\n//     >\n//       {categories.map((category) => {\n//         const isSelected = selectedCategory === category;\n\n//         return (\n//           <Text\n//             key={category}\n//             fontWeight={isSelected ? 'bold' : null}\n//             onClick={() => {\n//               if (isSelected) {\n//                 setSelectedCategory(null);\n//               } else {\n//                 setSelectedCategory(category);\n//               }\n//             }}\n//             _hover={{\n//               fontWeight: 'bold',\n//               cursor: 'pointer',\n//             }}\n//           >\n//             {category}\n//           </Text>\n//         );\n//       })}\n//     </Flex>\n//   );\n// };\n\n// const Tile = ({ url }) => {\n//   return (\n//     <Flex\n//       height='150px'\n//       width='250px'\n//       mt={2}\n//       mr={3}\n//       border='1px solid'\n//       borderColor='softBlack'\n//       _hover={{\n//         borderWidth: '2px',\n//         cursor: 'pointer',\n//       }}\n//     >\n//       <Text pl={3} pt={2}>\n//         {url}\n//       </Text>\n//     </Flex>\n//   );\n// };\n\n// TODO: get this working properly\nconst HighlightedText = ({ str, substr = '' }) => {\n  const startIndex = str.indexOf(substr);\n\n  if (!substr || !substr.trim()) {\n    return <Text fontSize={['sm', 'sm', 'md']}>{str}</Text>;\n  }\n\n  if (startIndex > -1) {\n    const startStr = str.slice(0, startIndex);\n    const endStr = str.slice(startIndex + substr.length, str.length);\n\n    return (\n      <Text fontSize={['sm', 'sm', 'md']}>\n        {startStr}\n        <Text as='span' fontWeight={600} color='Keppel'>\n          {substr}\n        </Text>\n        {endStr}\n      </Text>\n    );\n  } else {\n    return (\n      <Text fontSize={['sm', 'sm', 'md']} color='gray.400'>\n        {str}\n      </Text>\n    );\n  }\n};\n\nconst LinkListItem = ({ url, inputTerm }) => {\n  return (\n    <Flex\n      m={[1, 1, 2]}\n      // TODO: open as background tab\n      onClick={() => window.open(url, '_blank')}\n      _hover={{\n        cursor: 'pointer',\n        fontWeight: 600,\n        color: 'Keppel',\n      }}\n    >\n      <HighlightedText str={url} substr={inputTerm} />\n    </Flex>\n  );\n};\n\nconst Grid = ({ category, links, inputTerm }) => {\n  if (!links) {\n    // TODO: loading spinner\n    return null;\n  }\n\n  return (\n    <>\n      <Flex\n        direction='row'\n        flexWrap='wrap'\n        justify='center'\n        align='center'\n        pr={3}\n      >\n        {links.map((link) => {\n          return (\n            <LinkListItem key={link.id} url={link.url} inputTerm={inputTerm} />\n          );\n        })}\n      </Flex>\n    </>\n  );\n};\n\nexport const Main = ({ user }) => {\n  const [inputTerm, setInputTerm] = useState(null);\n  const [isCreatingLink, setIsCreatingLink] = useState(false);\n  const [links, setLinks] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const categories = Object.keys(MOCK_DATA);\n  const contents = selectedCategory ? MOCK_DATA[selectedCategory] : null;\n\n  const signOut = () => {\n    supabase.auth.signOut();\n  };\n\n  const fetchLinks = async () => {\n    const { data, error } = await supabase\n      .from('links')\n      .select('*')\n      .order('id', { ascending: true });\n\n    if (error) {\n      console.log('error', error);\n    } else {\n      setLinks(data);\n    }\n  };\n\n  // const deleteLink = async (id) => {\n  //   try {\n  //     await supabase.from('todos').delete().eq('id', id);\n  //     setTodos(todos.filter((x) => x.id !== id));\n  //   } catch (error) {\n  //     console.log('error', error);\n  //   }\n  // };\n\n  const addLink = async () => {\n    if (!inputTerm) return;\n\n    setIsCreatingLink(true);\n    const { data: newLink, error } = await supabase\n      .from('links')\n      .insert({ url: inputTerm, user_id: user.id })\n      .single();\n\n    if (error) {\n      console.log(error);\n      setIsCreatingLink(false);\n    } else {\n      setLinks([...links, newLink]);\n      setInputTerm(null);\n      setIsCreatingLink(false);\n    }\n  };\n\n  // const toggleCompleted = async () => {\n  //   const { data, error } = await supabase\n  //     .from('todos')\n  //     .update({ is_complete: !isCompleted })\n  //     .eq('id', todo.id)\n  //     .single();\n  //   if (error) {\n  //     console.error(error);\n  //   }\n  //   setIsCompleted(data.is_complete);\n  // };\n\n  useEffect(() => {\n    if (!links) {\n      fetchLinks();\n    }\n  }, []);\n\n  return (\n    <Flex direction='column' bg='paper' height='100vh' overflowY='hidden'>\n      <Flex direction='column' width='100%' justify='flex-start' pl={5}>\n        <Text\n          color='softBlack'\n          fontWeight='black'\n          fontSize={['3xl', '3xl', '4xl']}\n          pt={2}\n        >\n          Atlas\n        </Text>\n        <Text\n          color='gray.400'\n          fontWeight='black'\n          fontSize={['xl', 'xl', '2xl']}\n          mt={-2}\n        >\n          アトラス\n        </Text>\n      </Flex>\n      <Flex direction='column' alignItems='center' width='100%' height='100%'>\n        <Flex\n          direction='column'\n          justify='center'\n          align='center'\n          width='100vw'\n          px={3}\n        >\n          <Flex\n            direction='column'\n            pb={[4, 4, 8]}\n            pt={4}\n            width={['95vw', '95vw', '65vw']}\n          >\n            <InputGroup justifySelf='center'>\n              <Input\n                type='text'\n                placeholder='Enter link...'\n                value={inputTerm || ''}\n                onChange={(e) => setInputTerm(e.target.value)}\n                disabled={isCreatingLink}\n              />\n            </InputGroup>\n            <Button\n              pt={3}\n              alignSelf='flex-end'\n              variant='link'\n              color='Keppel'\n              onClick={addLink}\n              disabled={!inputTerm || isCreatingLink}\n              _hover={{\n                textDecoration: 'none',\n              }}\n            >\n              Add\n            </Button>\n          </Flex>\n\n          <Flex direction='column' width='100%' height='100%'>\n            <Grid category={null} links={links} inputTerm={inputTerm} />\n          </Flex>\n        </Flex>\n      </Flex>\n      <Button\n        zIndex={100}\n        position='absolute'\n        bottom={10}\n        right={10}\n        bg='Terracotta'\n        onClick={signOut}\n      >\n        Logout\n      </Button>\n    </Flex>\n  );\n};\n","import React from 'react';\nimport { Button, Flex, Text } from '@chakra-ui/react';\n\nimport supabase from 'supabase';\n\nexport const Login = () => {\n  const isLocalDevelopment = process.env.NODE_ENV === 'development';\n\n  // TODO: additional login channels\n  const signInWithGithub = () => {\n    supabase.auth.signIn(\n      {\n        provider: 'github',\n      },\n      {\n        redirectTo: isLocalDevelopment\n          ? 'http://localhost:3000/atlas'\n          : 'https://rynpatk.github.io/atlas',\n      },\n    );\n  };\n\n  return (\n    <Flex direction='column' bg='paper' height='100vh'>\n      <Flex\n        align='center'\n        justify='center'\n        direction='row'\n        width='100%'\n        height='100%'\n      >\n        <Flex direction='column' align='center'>\n          <Text color='softBlack' fontWeight={700} fontSize='6xl' pb={5}>\n            Atlas\n          </Text>\n\n          {/* TODO: make multicolor button */}\n          <Button color='black' bg='Terracotta' onClick={signInWithGithub}>\n            Login with Github\n          </Button>\n          {/* <Button color='black' bg='Keppel' onClick={signInWithGithub}>\n            Login with Github\n          </Button>\n          <Button color='black' bg='OrientalPink' onClick={signInWithGithub}>\n            Login with Github\n          </Button>\n          <Button color='black' bg='HalfBaked' onClick={signInWithGithub}>\n            Login with Github\n          </Button>\n          <Button color='black' bg='Tacao' onClick={signInWithGithub}>\n            Login with Github\n          </Button> */}\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { Text } from '@chakra-ui/react';\nimport supabase from 'supabase';\n\nimport { Main, Login } from 'pages';\n\n// development notes:\n// supabase portal (development): https://app.supabase.io/project/zvwrqklvkomshwpkxepe\n// github repo: https://github.com/rynpatk/atlas\n// `npm run deploy` builds and deploys app to gh-pages\n// currently deployed at: https://rynpatk.github.io/atlas/\n\nconst App = () => {\n  const [user, setUser] = useState(null);\n  const isAuthenticated = Boolean(user);\n\n  useEffect(() => {\n    const session = supabase.auth.session();\n    setUser(session?.user ?? null);\n\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (_, session) => {\n        const currentUser = session?.user;\n        setUser(currentUser ?? null);\n      },\n    );\n\n    return () => {\n      authListener?.unsubscribe();\n    };\n  }, [user]);\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route\n          exact\n          path='/'\n          element={isAuthenticated ? <Main user={user} /> : <Login />}\n        />\n        <Route element={<Text>Oops!</Text>} status={404} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","export const colors = {\n  // in-use\n  Terracotta: '#E27D60',\n  HalfBaked: '#85CDCB',\n  Tacao: '#E8A87C',\n  OrientalPink: '#C38D9E',\n  Keppel: '#41B3A3',\n\n  softBlack: '#282425',\n\n  // old\n  softPink: '#f15152ff',\n  'primary-focus': '#e86f68',\n  'primary-content': '#282425',\n  softBlue: '#a4cbb4',\n  'secondary-focus': '#84b89a',\n  'secondary-content': '#282425',\n  softYellow: '#ebdc99',\n  'accent-focus': '#e2cd6e',\n\n  neutral: '#7d7259',\n  'neutral-focus': '#454035',\n  paper: '#fbfbf8',\n  // paper: '#e4d8b4',\n  'base-100': '#e4d8b4',\n  'base-200': '#d2c59d',\n  'base-300': '#c6b386',\n  'base-content': '#282425',\n  info: '#2094f3',\n  success: '#009485',\n  warning: '#ff9900',\n  error: '#ff5724',\n};\n\nexport default colors;\n","import { extendTheme } from '@chakra-ui/react';\n\nimport colors from './colors';\n\nexport const theme = extendTheme({\n  colors,\n  fonts: {\n    heading: 'Sora',\n    body: 'Sora',\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nimport App from './App';\nimport theme from './styles/theme';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}